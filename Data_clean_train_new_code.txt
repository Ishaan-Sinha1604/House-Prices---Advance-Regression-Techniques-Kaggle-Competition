install.packages("fastDummies")
install.packages(" Hmisc")
install.packages("corrplot")
install.packages("lares")
install.packages("psych")

library ("tidyverse")
library("readxl")
library("car")
library("mice")
library("fastDummies")
library(corrplot)
library(psych)

train_df <- read_csv(file.choose())
head(train_df)
str(train_df)
summary(train_df)

# Find missing data
sapply(train_df, function(x) sum(is.na(x)))

# Remove columns with too many missing values
copy_train <- dplyr::select(train_df, -c("Alley", "PoolQC", "Fence", "MiscFeature", "FireplaceQu"))
sapply(copy_train, function(x) sum(is.na(x)))
str(copy_train)

# Deal with categorical missing data
copy_train$BsmtQual <- ifelse(is.na(copy_train$BsmtQual), "None", copy_train$BsmtQual)
copy_train$BsmtCond <- ifelse(is.na(copy_train$BsmtCond), "None", copy_train$BsmtCond)
copy_train$BsmtExposure <- ifelse(is.na(copy_train$BsmtExposure), "None", copy_train$BsmtExposure)
copy_train$BsmtFinType1 <- ifelse(is.na(copy_train$BsmtFinType1), "None", copy_train$BsmtFinType1)
copy_train$BsmtFinType2 <- ifelse(is.na(copy_train$BsmtFinType2), "None", copy_train$BsmtFinType2)
copy_train$GarageType <- ifelse(is.na(copy_train$GarageType), "None", copy_train$GarageType)
copy_train$GarageFinish <- ifelse(is.na(copy_train$GarageFinish), "None", copy_train$GarageFinish)
copy_train$GarageQual <- ifelse(is.na(copy_train$GarageQual), "None", copy_train$GarageQual)
copy_train$GarageCond <- ifelse(is.na(copy_train$GarageCond), "None", copy_train$GarageCond)
copy_train$BsmtFullBath <- ifelse(is.na(copy_train$BsmtFullBath), "None", copy_train$BsmtFullBath)
copy_train$BsmtHalfBath <- ifelse(is.na(copy_train$BsmtHalfBath), "None", copy_train$BsmtHalfBath)

copy_train$MasVnrType <- ifelse(is.na(copy_train$MasVnrType), "None", copy_train$MasVnrType)
copy_train$Electrical <- ifelse(is.na(copy_train$Electrical), "None", copy_train$Electrical)
copy_train$MSZoning <- ifelse(is.na(copy_train$MSZoning), "None", copy_train$MSZoning)
copy_train$Utilities <- ifelse(is.na(copy_train$Utilities), "None", copy_train$Utilities)
copy_train$Exterior1st <- ifelse(is.na(copy_train$Exterior1st), "None", copy_train$Exterior1st)
copy_train$Exterior2nd <- ifelse(is.na(copy_train$Exterior2nd), "None", copy_train$KitchenQual)
copy_train$KitchenQual <- ifelse(is.na(copy_train$KitchenQual), "None", copy_train$BsmtHalfBath)
copy_train$Functional <- ifelse(is.na(copy_train$Functional), "None", copy_train$Functional)
copy_train$SaleType <- ifelse(is.na(copy_train$SaleType), "None", copy_train$SaleType)

copy_train$LotFrontage[is.na(copy_train$LotFrontage)] <- median(copy_train$LotFrontage, na.rm = T)
copy_train$MasVnrArea[is.na(copy_train$MasVnrArea)] <- median(copy_train$MasVnrArea, na.rm = T)
copy_train$GarageYrBlt[is.na(copy_train$GarageYrBlt)] <- median(copy_train$GarageYrBlt, na.rm = T)


sapply(copy_train, function(x) sum(is.na(x)))
md.pattern (copy_train)

# Data Conversion
str(copy_train)
copy_train$MSSubClass <- as.character(copy_train$MSSubClass)
copy_train$OverallQual <- as.character(copy_train$OverallQual)
copy_train$OverallCond <- as.character(copy_train$OverallCond)

copy_train$Age <- 2022 - copy_train$YearBuilt     
copy_train$AgeRemodAdd <- 2022 - copy_train$YearRemodAdd 
copy_train$GarageAge <- 2022 - copy_train$GarageYrBlt 
copy_train$AgeSold <- 2022 - copy_train$YrSold 
copy_train <- dplyr::select(copy_train, -c("YearRemodAdd", "GarageYrBlt", "YrSold", "YearBuilt"))

names(copy_train)[names(copy_train) == "1stFlrSF"] <- "FirstFlrSF"
names(copy_train)[names(copy_train) == "2ndFlrSF"] <- "SecondFlrSF"
names(copy_train)[names(copy_train) == "3SsnPorch"] <- "ThreeSsnPorch"

# Creating dummy variables` `
copy_train.X <- copy_train
copy_train.X <- dummy_cols(copy_train, remove_selected_columns=TRUE)
res <- cor(copy_train[sapply(copy_train, function(x) !is.character(x))])
round(res,2)
corrplot(res, type="upper", order="hclust", tl.col = "black", tl.srt=45, sig.level = 0.1)
pval <- psych::corr.test(copy_train[sapply(copy_train, function(x) !is.character(x))], adjust="none")$p
corrplot(res, type="upper",  p.mat=pval, insig="p-value", tl.pos="n", sig.level=0)
# corrplot(res, type="lower", add=T, tl.pos="d", cl.pos="n")
library(lares)

# total_set <- rbind(copy_train.X, copy_test)
# total_set <- dummy_cols(total_set, remove_first_dummy=TRUE, remove_selected_columns=TRUE)
# copy_train.X <- total_set[1:1370,]
# copy_train.X$SalePrice <- copy_train$SalePrice

write.csv(copy_train, file = "TrainData_Clean.csv")

# Split the data
library (caTools)
set.seed(6)
inx <- sample.split(seq_len(nrow(copy_train)), 0.75)
copy_train.prediction <-  copy_train[!inx, ]
copy_train.new <- copy_train[inx, ]

salesPrice_prediction <- copy_train.prediction$SalePrice
copy_train.predictionX <- dplyr::select(copy_train.prediction, -c("SalePrice"))


# Fitting model
library(glmnet)
reg1 <- lm(SalePrice~., copy_train.new)
coef(reg1)
print(summary(reg1)$coefficients<0.05) 
summary(reg1)
plot(reg1)


# Create Model Matrix
model <- model.matrix( ~ log(LotArea+1)+log(MasVnrArea+1)+log(LotFrontage+1)+log(PoolArea+1)+
                         log(BsmtFinSF1+1)+log(BsmtFinSF2+1)+log(BsmtUnfSF+1)+log(TotalBsmtSF+1)+log(FirstFlrSF+1)+
                         log(SecondFlrSF+1)+log(LowQualFinSF+1)+log(GrLivArea+1)+log(GarageArea+1)+log(WoodDeckSF+1)+
                         log(OpenPorchSF+1)+log(EnclosedPorch+1)+log(ThreeSsnPorch+1)+log(ScreenPorch+1)+log(MiscVal+1)+
                         log(Age+1)+log(AgeRemodAdd+1)+log(GarageAge+1)+log(AgeSold+1)+LotArea+MasVnrArea+LotFrontage
                       +BsmtFinSF1+BsmtFinSF2+TotalBsmtSF+FirstFlrSF+SecondFlrSF+LowQualFinSF+GrLivArea+GarageArea+
                         WoodDeckSF+OpenPorchSF+EnclosedPorch+ThreeSsnPorch+ScreenPorch+MiscVal+Age+AgeRemodAdd+
                         GarageAge+AgeSold+PoolArea+MSZoning*MSSubClass*LotArea+MSZoning*MSSubClass*log(LotArea+1)+
                       MSZoning*MSSubClass*sqrt(LotArea)+MSZoning*log(LotArea+1)+
                         Street+LotFrontage+Street*log(LotFrontage+1)+Street*sqrt(LotFrontage)+
                         LotShape*LotArea+LotShape*log(LotArea+1)+LotShape*sqrt(LotArea)*MSSubClass+
                         LotShape*log(LotArea+1)*LandContour+LandSlope+LandSlope*sqrt(LotArea)+
                         Neighborhood*Utilities+Condition1+Condition2+BldgType+HouseStyle+
                         OverallQual*OverallCond+OverallQual*OverallCond*GrLivArea+OverallQual*OverallCond*sqrt(GrLivArea)
                       +OverallCond*log(Age+1)+OverallCond*log(AgeRemodAdd+1)+RoofStyle*RoofMatl+
                         Exterior1st*Exterior2nd*log(GrLivArea+1)+Exterior1st*Exterior2nd*sqrt(GrLivArea)+
                         MasVnrType*MasVnrArea+MasVnrType*log(MasVnrArea+1)+MasVnrType*sqrt(MasVnrArea)+
                         Exterior1st*ExterQual*ExterCond+Exterior2nd*ExterQual*ExterCond+Foundation*log(LotArea+1)+
                         Foundation*sqrt(LotArea)+BsmtQual*BsmtCond*TotalBsmtSF+BsmtQual*BsmtCond*sqrt(TotalBsmtSF)+
                         BsmtQual*BsmtCond*log(TotalBsmtSF+1)+BsmtExposure+BsmtFinType1*log(BsmtFinSF1+1)+
                         BsmtFinType2*log(BsmtFinSF2+1)+Heating*HeatingQC*CentralAir+Electrical+
                         BsmtFullBath*sqrt(TotalBsmtSF)+BsmtHalfBath*sqrt(TotalBsmtSF)+FullBath*log(GrLivArea+1)+
                         HalfBath*log(GrLivArea+1)+BedroomAbvGr*log(FirstFlrSF+1)+BedroomAbvGr*log(SecondFlrSF+1)+
                         KitchenAbvGr*KitchenQual+TotRmsAbvGrd*sqrt(GrLivArea)+Functional+Fireplaces+
                         GarageType+GarageAge*GarageCond+GarageQual*GarageCond*GarageCars+GarageQual*GarageCond*sqrt(GarageArea)
                       +GarageQual*GarageCond*log(GarageArea+1)+GarageFinish*log(GarageArea+1)+PavedDrive,copy_train)
                           
model <- cbind(copy_train$Id, model)

train_model<- model[inx,]
test_model <- model[!inx,]
y.train <- log(copy_train.new$SalePrice)

# LASSO
lasso.fit <- glmnet(x = train_model, y = y.train, alpha = 1)
plot(lasso.fit, xvar = "lambda")


crossval <-  cv.glmnet(x = train_model, y = y.train, alpha = 1)
plot(crossval)
penalty.lasso <- crossval$lambda.min 
log(penalty.lasso) #see where it was on the graph
plot(crossval,xlim=c(-8.5,-6),ylim=c(0.006,0.008))
lasso.opt.fit <-glmnet(x = train_model, y = y.train, alpha = 1, lambda = penalty.lasso)
coef(lasso.opt.fit)

lasso.testing <- exp(predict(lasso.opt.fit, s = penalty.lasso, newx =test_model))
lasso.testing.MSE <- mean((lasso.testing- salesPrice_prediction )^2)
lasso.testing.MSE

# Ridge
ridge.fit<-glmnet(x = train_model, y = y.train, alpha = 0)
plot(ridge.fit, xvar = "lambda")

#selecting the best penalty lambda
crossval.ridge <-  cv.glmnet(x = train_model, y = y.train, alpha = 0)
plot(crossval.ridge)
penalty.ridge <- crossval.ridge$lambda.min 
log(penalty.ridge) 
ridge.opt.fit <-glmnet(x = train_model, y = y.train, alpha = 0, lambda = penalty.ridge) #estimate the model with that
coef(ridge.opt.fit)

ridge.testing <- exp(predict(ridge.opt.fit, s = penalty.ridge, newx =test_model))
ridge.testing.MSE <- mean((ridge.testing- salesPrice_prediction )^2)
ridge.testing.MSE













